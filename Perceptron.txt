filename = 'notstressed.txt';
delimiterIn = ' ';
headerlinesIn = 1;
A = importdata(filename,delimiterIn,headerlinesIn);
NS=A.data;
filename = 'stressed.txt';
delimiterIn = ' ';
headerlinesIn = 1;
B = importdata(filename,delimiterIn,headerlinesIn);
S=B.data;
grp = cat(1,NS,S);
tr=[];
ts=[];
for v = 200:1:399
grp(v,3)=1;
end;
for i = 1:1:349
    if i < 175 
    tr(i,1)=grp(i,1);
    tr(i,2)=grp(i,2);
    tr(i,3)=0;
    else
    tr(i,1)=grp(i+25,1);
    tr(i,2)=grp(i+25,2);
    tr(i,3)=1;
    end;
end;  
for i = 1:1:399
    if i>=175 && i<=199
    ts(i-174,1)=grp(i,1);
    ts(i-174,2)=grp(i,2);
    ts(i-174,3)=0;
    end;
    if 375<=i && i<=399 
    ts(i-349,1)=grp(i,1);
    ts(i-349,2)=grp(i,2);
    ts(i-349,3)=1;
    end;
end;  
sum=0;
W1=0;
W2=0;
bias=1;
mu=0.1;
arrayW1=[];
arrayW2=[];
error_tr=[];
error_ts=0;
r1=0;
h=0;
            count=0;
            counts=0;
for r = 1:1:5000
    tr_S=tr(randperm(size(tr,1)),:);
    for j = 1:1:349
        sum=0;
        sum=(tr_S(j,1)*W1+tr_S(j,2)*W2)+bias;
        if sum>0
            y=1;
            tr_S(j,4)=y;    
        else 
            y=0;
            tr_S(j,4)=y;
        end;
        W1=W1+mu*(tr_S(j,3)-y)*tr_S(j,1);
        W2=W2+mu*(tr_S(j,3)-y)*tr_S(j,2);
        bias=bias+mu*(tr_S(j,3)-y);        
    end;
    if h==0;
            for i = 1:1:349
                if tr_S(i,3)==tr_S(i,4)
                    count=count+1;
                end;
            end;
            error_tr(end+1)=1-(count/349);
 
            h=h+1;
    end;
        if mod(r,50)==0
            count=0;
            counts=0;
            for i = 1:1:349
                if tr_S(i,3)==tr_S(i,4)
                    count=count+1;
                end;
            end;
            error_tr(end+1)=1-(count/349);
            for i = 1:1:50
                sum=0;
                sum=(ts(i,1)*W1+ts(i,2)*W2)+bias;
                if sum>0
                    y=1;
                    ts(i,4)=y;    
                else 
                    y=0;
                    ts(i,4)=y;
                end;
            end;
            for i = 1:1:50
                if ts(i,3)==ts(i,4)
                    counts=counts+1;
                end;
            end;
            error_ts(end+1)=1-(counts/50);
        r1(end+1)=r;
        end;
%         if mod(r,50)~=0 && r~=1
%         error_ts(end+1)=error_ts(end);
%         error_tr(end+1)=error_tr(end);
%         end;
        
end;
true_positive=0;
false_positive=0;
true_negative=0;
false_negative=0;
for e = 1:1:349
    if tr_S(e,3)==tr_S(e,4) && tr_S(e,3)==1
        true_positive=true_positive+1;
    end;
    if tr_S(e,3)~=tr_S(e,4) && tr_S(e,3)==0
        false_positive=false_positive+1;
    end;
    if tr_S(e,3)==tr_S(e,4) && tr_S(e,3)==0
        true_negative=true_negative+1;
    end;
    if tr_S(e,3)~=tr_S(e,4) && tr_S(e,3)==1
        false_negative=false_negative+1;
    end;
end;
true_positive_t=0;
false_positive_t=0;
true_negative_t=0;
false_negative_t=0;
for e = 1:1:50
    if ts(e,3)==tr_S(e,4) && ts(e,3)==1
        true_positive_t=true_positive_t+1;
    end;
    if ts(e,3)~=tr_S(e,4) && ts(e,3)==0
        false_positive_t=false_positive_t+1;
    end;
    if ts(e,3)==tr_S(e,4) && ts(e,3)==0
        true_negative_t=true_negative_t+1;
    end;
    if ts(e,3)~=tr_S(e,4) && ts(e,3)==1
        false_negative_t=false_negative_t+1;
    end;
end;
w(1,1)=W1;
w(1,2)=W2;
gscatter(tr_S(:,1),tr_S(:,2),tr_S(:,3))
plotpc(w,bias)
title('Descision Boundry For Perceptron')
xlabel('H')
ylabel('W')
hitrate=(true_positive+true_negative)/349;
hitrate_t=(true_positive_t+true_negative_t)/50;
sensitivity=true_positive/(true_positive+false_negative);
sensitivity_t=true_positive_t/(true_positive_t+false_negative_t);
specificity=true_negative/(true_negative+false_positive);
specificity_t=true_negative_t/(true_negative_t+false_positive_t);
ppv=true_positive/(true_positive+false_positive);
ppv_t=true_positive_t/(true_positive_t+false_positive_t);
npv=true_negative/(true_negative+false_negative);
npv_t=true_negative_t/(true_negative_t+false_negative_t);
figure(2)
 
q ={'HIT RATE';'SENSITIVITY';'SPECIFICITY';'POSITIVE PREDICTED VALUE';'NEGATIVE PREDICTED VALUE'};
bg=[hitrate, sensitivity, specificity, ppv, npv];
 
bar(bg)
set(gca,'xticklabel',q)
title('Training Set')
figure(3)
 
q ={'HIT RATE';'SENSITIVITY';'SPECIFICITY';'POSITIVE PREDICTED VALUE';'NEGATIVE PREDICTED VALUE'};
bg=[hitrate_t, sensitivity_t, specificity_t, ppv_t, npv_t];
 
bar(bg)
set(gca,'xticklabel',q)
title('Testing Set')
%xlabel('Epoch');
%ylabel('Error Rate')
figure(4)
plot(r1,error_tr,'r')
hold on
plot(r1,error_ts,'b')
axis([1 5000 0 1])
title('Error Rate')
xlabel('Epoch');
ylabel('Error Rate')
